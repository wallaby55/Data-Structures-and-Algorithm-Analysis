package Chapter1;
import java.lang.Math.*;

/** In this class, we solve a word search puzzle ( chapter1, question2 in Mark ALlen Weiss'
 *  textbook "Data Structures and Algorithm Analysis")
 *
 *  In this class, I have prepared an array of words. These words are placed into a 2dimensional array,
 *  and then the remaining empty spaces are filled with random letters.
 *
 *  The board is then displayed to the user on System.out.
 *
 *  The method "solve word search" then finds each word in the word search, and displays to System.out the 2x2 array with just the
 *  letters belonging to found words visible.
 *
 *  Written by: Andrew Pauls
 *  Computer Science student at Brock University, Ontario, Canada
 *  June 23, 2022
 *  Dedicated to Otty
 */

public class q2 {

    char[] alphabet         = new char[]{'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};                  // all of the letters of the alphabet
    char[][] wordPuzzle     = new char[20][20];              // the 'board' that we need to solve ( 20 x 20 is arbitrarily sized )
    String[] masterWordList = new String[]{"apple", "tractor", "venom", "platoon", "mongoose", "danger", "hoard", "elementary", "beach", "carnival", "gator", "jump", "umbrella", "yonder", "wait", "munch", "kangaroo", "water"};                // master word list, which 'subWordList' will always be derived from ( arbitrary length)
    String[] subWordList    = new String[8];                 // a derivation of master word list, containing fewer words ( 6 )
    public q2 ( ) {

        // build the sub word list
        buildSubWordList(masterWordList);
        displayWordList(subWordList);


        // build the board
        initBoard(wordPuzzle);
        insertWords(subWordList,wordPuzzle);
        displayBoard(wordPuzzle);

        // fill in board
        System.out.println();
        System.out.println("The board should now be filled in and difficult to solve");
        fillInBoard(wordPuzzle);
        displayBoard(wordPuzzle);

        // now we need to solve the word search
        System.out.println();
        System.out.println("At this point, we have built up our board. Now we need to solve it");
        char[][] fullySolvedBoard = solveBoard(wordPuzzle, subWordList);
        System.out.println("Ok, so the board is hopefully solved at this point");
        markEmpties(fullySolvedBoard);
        displayBoard(fullySolvedBoard);
    }
    private void markEmpties(char[][] solutionBoard ) {
        for ( int i = 0 ; i < solutionBoard.length ; i++ ) {
            for ( int j = 0 ; j < solutionBoard.length; j++ ) {
                if ( solutionBoard[i][j] == ' ' ) {
                    solutionBoard[i][j] = '*';
                }
            }
        }
    }

    private char[][] solveBoard(char[][] board, String[] wordsToBeFound) {
        // for each word in the word list...
        char[][] solvedPuzzle = new char[20][20];
        initBoard(solvedPuzzle);
        for ( int i = 0 ; i < wordsToBeFound.length ; i++ ) {
            char[] currentWord = wordsToBeFound[i].toCharArray();
            // scan the entire board for the first letter match
            for ( int q = 0 ; q < board.length ; q++ ) {
                for ( int p = 0 ; p < board.length ; p++ ) {
                    if ( board[q][p] == currentWord[0] ) {
                        // check all eight directions for word
                        solvedPuzzle = findWord(board, currentWord, q, p, solvedPuzzle);
                    }
                }
            }
        }
        return solvedPuzzle;
    }

    private char[][] findWord(char[][] board, char[] currentWord, int xC, int yC, char[][] solution) {
        // the general algorithm for finding the word and filling it in
        // check if the word is where it may be
        // if the word is there, start at the original location, fill in
        // if the word is not there, do not fill in any letters
        // repeat for all 8 directions


        // check up, right
        // need to ensure that if the positions run out of bounds that something is terminated.
        int counter = 1;
        for (int i = 1; i < currentWord.length; i++) {
            // check that were staying in bounds for the given direction
            if (0 <= xC + currentWord.length & xC + currentWord.length < board.length & 0 <= yC - currentWord.length & yC - currentWord.length < board.length) {
                if (board[xC + i][yC - i] == currentWord[i]) {
                    counter++;
                }
            }
        }

        if (counter == currentWord.length) {
            for (int j = 0; j < currentWord.length; j++) {
                solution[xC + j][yC - j] = board[xC + j][yC - j];
            }
        }


        // check up, straight
        counter = 1;
        for (int q = 1; q < currentWord.length; q++) {
            if (0 <= yC - currentWord.length & yC - currentWord.length < board.length) {
                if (board[xC][yC - q] == currentWord[q]) {
                    counter++;
                }
            }
        }
        if (counter == currentWord.length) {
            for (int j = 0; j < currentWord.length; j++) {
                solution[xC][yC - j] = board[xC][yC - j];
            }
        }

        // check up, left
        counter = 1;
        for (int i = 1; i < currentWord.length; i++) {
            if (0 <= xC - currentWord.length & xC - currentWord.length < board.length & 0 <= yC - currentWord.length & yC - currentWord.length < board.length) {
                if (board[xC - i][yC - i] == currentWord[i]) {
                    counter++;
                }
            }
        }
        if (counter == currentWord.length) {
            for (int j = 0; j < currentWord.length; j++) {
                solution[xC - j][yC - j] = board[xC - j][yC - j];
            }
        }

        // check flat, left
        counter = 1;
        for (int i = 1; i < currentWord.length; i++) {
            if (0 <= xC - currentWord.length & xC - currentWord.length < board.length) {
                if (board[xC - i][yC] == currentWord[i]) {
                    counter++;
                }
            }
        }
        if (counter == currentWord.length) {
            for (int j = 0; j < currentWord.length; j++) {
                solution[xC - j][yC] = board[xC - j][yC];
            }
        }

        // check down, left
        counter = 1;
        for (int i = 1; i < currentWord.length; i++) {
            if (0 <= xC - currentWord.length & xC - currentWord.length < board.length & 0 <= yC + currentWord.length & yC + currentWord.length < board.length) {

                if (board[xC - i][yC + i] == currentWord[i]) {
                    counter++;
                }
            }
        }
        if (counter == currentWord.length) {
            for (int j = 0; j < currentWord.length; j++) {
                solution[xC - j][yC + j] = board[xC - j][yC + j];
            }
        }

        // check down, down
        counter = 1;
        for (int i = 1; i < currentWord.length; i++) {
            if (0 <= yC + currentWord.length & yC + currentWord.length < board.length) {
                if (board[xC][yC + i] == currentWord[i]) {
                    counter++;
                }
            }
        }
        if (counter == currentWord.length) {
            for (int j = 0; j < currentWord.length; j++) {
                solution[xC][yC + j] = board[xC][yC + j];
            }
        }

        // check down, right
        counter = 1;
        for (int i = 1; i < currentWord.length; i++) {
            if (0 <= xC + currentWord.length & xC + currentWord.length < board.length & 0 <= yC + currentWord.length & yC + currentWord.length < board.length) {
                if (board[xC + i][yC + i] == currentWord[i]) {
                    counter++;
                }
            }
        }
        if (counter == currentWord.length) {
            for (int j = 0; j < currentWord.length; j++) {
                solution[xC + j][yC + j] = board[xC + j][yC + j];
            }
        }

        // check flat, right
        counter = 1;
        for (int i = 1; i < currentWord.length; i++) {
            if (0 <= xC + currentWord.length & xC + currentWord.length < board.length) {
                if (board[xC + i][yC] == currentWord[i]) {
                    counter++;
                }
            }
        }
        if (counter == currentWord.length) {
            for (int j = 0; j < currentWord.length; j++) {
                solution[xC + j][yC] = board[xC + j][yC];
            }
        }
        return solution;
    }

    private void fillInBoard(char[][] theBoard) {
        for ( int i = 0 ; i < theBoard.length ; i++ ) {
            for ( int j = 0 ; j < theBoard.length ; j++ ) {
                int q = (int) ((int) alphabet.length * Math.random());
                if ( theBoard[i][j] == ' ' ) {
                    theBoard[i][j] = alphabet[q];
                }
            }
        }
    }
    private void initBoard (char[][] board) {
        for ( int i = 0 ; i < board.length ; i++ ) {
            for ( int j = 0 ; j < board.length ; j++ ) {
                board[i][j] = ' ';
            }
        }
    }

    private void displayBoard (char[][] board ) {
        System.out.println();
        System.out.println("The Board");

        for ( int h = 0 ; h < board.length; h++ ) {
            System.out.print('-');
        }
        System.out.println();
        for ( int i = 0 ; i < board.length ; i++ ) {
            for ( int j = 0 ; j < board.length ; j++ ) {
                System.out.print(board[i][j]);
            }
            System.out.println();
        }
        for ( int a = 0 ; a < board.length ; a++ ) {
            System.out.print('-');
        }
    }
    private void insertWords(String[] words, char[][] theBoard) {

        // for each word that needs to be inserted
        for (int i = 0; i < words.length; i++) {

            // turn the word into a char array
            char[] currentWord = words[i].toCharArray();
            // randomly generate coordinates for the first letter
            int xCoordinate = (int) ((int) theBoard.length * Math.random());    // generates a random x
            int yCoordinate = (int) ((int) theBoard.length * Math.random());    // generates a random y
            // randomly generate a direction
            int xChange = (int) ((int) 4 * Math.random() - 2);                // generates a random val such that -1 <= x <= 1
            int yChange = (int) ((int) 4 * Math.random() - 2);                       // generates a random val such that -1 <= y <= 1
            while ( xChange == 0 & yChange == 0 ) {
                xChange = (int) ((int) 4 * Math.random() - 2);                // generates a random val such that -1 <= x <= 1
                yChange = (int) ((int) 4 * Math.random() - 2);
            }
            // check if it is possible to insert the word in that direction ( boundaries )
            boolean xDirectionIsValid = (0 <= xCoordinate + currentWord.length * xChange & xCoordinate + currentWord.length * xChange < theBoard.length);
            while (! xDirectionIsValid) {
                xCoordinate = (int) ((int) theBoard.length * Math.random());
                xChange = (int) ((int) 4 * Math.random() - 2);                       // generates a random val such that -1 <= x <= 1
                xDirectionIsValid = (0 <= xCoordinate + currentWord.length * xChange & xCoordinate + currentWord.length * xChange < theBoard.length);
            }
            while ( xChange == 0 & yChange == 0 ) {
                // generates a random val such that -1 <= x <= 1
                yChange = (int) ((int) 4 * Math.random() - 2);
            }
            boolean yDirectionIsValid = (0 <= yCoordinate + currentWord.length * yChange & yCoordinate + currentWord.length * yChange < theBoard.length);
            while (!yDirectionIsValid) {
                yCoordinate = (int) ((int) theBoard.length * Math.random());
                yChange = (int) ((int) 4 * Math.random() - 2);                     // generates a random val such that -1 <= x <= 1
                while ( xChange == 0 & yChange == 0){
                    yChange = (int) ((int) 4 * Math.random() - 2);
                }
                yDirectionIsValid = (0 <= yCoordinate + currentWord.length * yChange & yCoordinate + currentWord.length * yChange < theBoard.length);
            }



            // check if it is possible to insert the word in that direction ( boundaries )boolean isAllClearSpaces
            boolean allClearSpaces = findsClearChute(theBoard, xCoordinate, yCoordinate, xChange, yChange, currentWord);
            while (!allClearSpaces) {
                // generate a new (x,y) start
                xCoordinate = (int) ((int) theBoard.length * Math.random());
                yCoordinate = (int) ((int) theBoard.length * Math.random());
                // generate a new direction for word
                xChange = (int) ((int) 4 * Math.random() - 2);                       // generates a random val such that -1 <= x <= 1
                yChange = (int) ((int) 4 * Math.random() - 2);                        // generates a random val such that -1 <= y <= 1
                // make sure the direction is valid

                xDirectionIsValid = (0 <= xCoordinate + currentWord.length * xChange & xCoordinate + currentWord.length * xChange < theBoard.length);
                while (!xDirectionIsValid) {
                    xCoordinate = (int) ((int) theBoard.length * Math.random());
                    xChange = (int) ((int) 4 * Math.random() - 2);                        // generates a random val such that -1 <= x <= 1
                    xDirectionIsValid = (0 <= xCoordinate + currentWord.length * xChange & xCoordinate + currentWord.length * xChange < theBoard.length);
                }

                while ( xChange == 0 & yChange == 0 ) {
                    // generates a random val such that -1 <= x <= 1
                    yChange = (int) ((int) 4 * Math.random() - 2);
                }
                yDirectionIsValid = (0 <= yCoordinate + currentWord.length * yChange & yCoordinate + currentWord.length * yChange < theBoard.length);
                while (!yDirectionIsValid) {
                    yCoordinate = (int) ((int) theBoard.length * Math.random());
                    yChange = (int) ((int) 4 * Math.random() - 2);                        // generates a random val such that -1 <= x <= 1
                    while ( xChange == 0 & yChange == 0 ) {// generates a random val such that -1 <= x <= 1
                        yChange = (int) ((int) 4 * Math.random() - 2);
                    }
                    yDirectionIsValid = (0 <= yCoordinate + currentWord.length * yChange & yCoordinate + currentWord.length * yChange < theBoard.length);
                }
                allClearSpaces = findsClearChute(theBoard, xCoordinate, yCoordinate, xChange, yChange, currentWord);
            }

            // it now has to be the case that we may insert the word

                theBoard[xCoordinate][yCoordinate] = currentWord[0];        // insert the first letter
                xCoordinate = xCoordinate + xChange;                        // update the position of next insertion
                yCoordinate = yCoordinate + yChange;                        // update the position of next insertion

            for ( int k = 1 ; k < currentWord.length ; k++ ) {           // for the rest of the letters in the word
                theBoard[xCoordinate][yCoordinate] = currentWord[k];     // insert the right letter into the board
                xCoordinate = xCoordinate + xChange;                     // update the position for next insertion
                yCoordinate = yCoordinate + yChange;                     // update the position for next insertion
            }
        }
    }

    private boolean findsClearChute(char[][] board, int xStarting, int yStarting, int xDir, int yDir, char[] word) {
        // if chute is clear, return true
        int counter = 0;
        // make sure the first spot is clear
        if ( board[xStarting][yStarting] == ' ' ) {
            counter++;
            xStarting = xStarting+ xDir;
            yStarting = yStarting + yDir;
        }
        for ( int i = 0 ; i < word.length-1 ; i++ ) {
            if (board[xStarting][yStarting] == ' ') {
                counter++;
                xStarting = xStarting + xDir;
                yStarting = yStarting + yDir;
            }
        }
        return counter == word.length;
    }
    //methods
    private void displayWordList(String[] theList) {
        System.out.println();
        System.out.println("We are going to display the word list of the current word search: ");
        for ( int i = 0 ; i < theList.length ; i++ ) {
            System.out.println(theList[i]);
        }
        System.out.println("Those are the " + subWordList.length + " words");
        System.out.println();
    }
    private void buildSubWordList( String[] mList ) {
        int i;
        for ( int j = 0 ; j < subWordList.length ; j++ ) {
            i = (int) ((int)18*Math.random());
            subWordList[j] = mList[i];
        }
    }


    public static void main (String [] args) { q2 qq = new q2();}
}

