package Chapter1;
import java.lang.Math.*;

/** In this class, we solve a word search puzzle ( chapter1, question2 in Mark ALlen Weiss'
 *  textbook "Data Structures and Algorithm Analysis")
 *
 *  In this class, I have prepared an array of words. These words are placed into a 2dimensional array,
 *  and then the remaining empty spaces are filled with random letters.
 *
 *  The board is then displayed to the user on System.out.
 *
 *  The method "solve word search" then finds each word in the word search, and displays to System.out the 2x2 array with just the
 *  letters belonging to found words visible.
 *
 *  Written by: Andrew Pauls
 *  Computer Science student at Brock University, Ontario, Canada
 *  June 23, 2022
 *  Dedicated to Otty
 */

public class q2 {

    char[] alphabet         = new char[]{'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};                  // all of the letters of the alphabet
    char[][] wordPuzzle     = new char[20][20];              // the 'board' that we need to solve ( 20 x 20 is arbitrarily sized )
    String[] masterWordList = new String[]{"apple", "tractor", "venom", "platoon", "mongoose", "danger", "hoard", "elementary", "beach", "carnival", "gator", "jump", "umbrella", "yonder", "wait", "munch", "kangaroo", "water"};                // master word list, which 'subWordList' will always be derived from ( arbitrary length)
    String[] subWordList    = new String[6];                 // a derivation of master word list, containing fewer words ( 6 )
    public q2 ( ) {

        // build the sub word list
        buildSubWordList(masterWordList);
        displayWordList(subWordList);
        initBoard(wordPuzzle);
        displayBoard(wordPuzzle);


        // build the board
        //insertWords(subWordList,wordPuzzle);
        //fillInEmptySpaces();
        //displayBoard(wordPuzzle);
        // display the board

    }

    private void initBoard (char[][] board) {
        for ( int i = 0 ; i < board.length ; i++ ) {
            for ( int j = 0 ; j < board.length ; j++ ) {
                board[i][j] = ' ';
            }
        }
    }

    private void displayBoard (char[][] board ) {
        for ( int i = 0 ; i < board.length ; i++ ) {
            for ( int j = 0 ; j < board.length ; j++ ) {
                System.out.print(board[i][j]);
            }
            System.out.println();
        }
    }
    private void insertWords(String[] words, char[][] theBoard) {
        // for each word that needs to be inserted
        for (int i = 0; i < words.length; i++) {
            // turn the word into a char array
            char[] currentWord = words[i].toCharArray();
            // randomly generate coordinates for the first letter
            int xCoordinate = (int) ((int) theBoard.length * Math.random());
            int yCoordinate = (int) ((int) theBoard.length * Math.random());
            // randomly generate a direction
            int xChange = (int) ((int) 3 * Math.random() - 1);                       // generates a random val such that -1 <= x <= 1
            int yChange = (int) ((int) 3 * Math.random() - 1);                       // generates a random val such that -1 <= y <= 1

            // check if it is possible to insert the word in that direction ( boundaries )
            boolean xDirectionIsValid = (0 <= xCoordinate + currentWord.length * xChange & xCoordinate + currentWord.length * xChange < theBoard.length);
            while (!xDirectionIsValid) {
                xCoordinate = (int) ((int) theBoard.length * Math.random());
                xChange = (int) ((int) 3 * Math.random() - 1);                       // generates a random val such that -1 <= x <= 1
            }

            boolean yDirectionIsValid = (0 <= yCoordinate + currentWord.length * yChange & yCoordinate + currentWord.length * yChange < theBoard.length);
            while (!yDirectionIsValid) {
                yCoordinate = (int) ((int) theBoard.length * Math.random());
                yChange = (int) ((int) 3 * Math.random() - 1);                       // generates a random val such that -1 <= x <= 1
            }


            // check if it is possible to insert the word in that direction ( boundaries )boolean isAllClearSpaces
            boolean allClearSpaces = findsClearChute(theBoard, xCoordinate, yCoordinate, xChange, yChange, currentWord);
            while (!allClearSpaces) {
                // generate a new (x,y) start
                xCoordinate = (int) ((int) theBoard.length * Math.random());
                yCoordinate = (int) ((int) theBoard.length * Math.random());
                // generate a new direction for word
                xChange = (int) ((int) 3 * Math.random() - 1);                       // generates a random val such that -1 <= x <= 1
                yChange = (int) ((int) 3 * Math.random() - 1);                       // generates a random val such that -1 <= y <= 1
                // make sure the direction is valid
                while (!xDirectionIsValid) {
                    xCoordinate = (int) ((int) theBoard.length * Math.random());
                    xChange = (int) ((int) 3 * Math.random() - 1);                       // generates a random val such that -1 <= x <= 1
                }
                while (!yDirectionIsValid) {
                    yCoordinate = (int) ((int) theBoard.length * Math.random());
                    yChange = (int) ((int) 3 * Math.random() - 1);                       // generates a random val such that -1 <= x <= 1
                }
            }
            // it now has to be the case that we may insert the word
            if (yDirectionIsValid & xDirectionIsValid & allClearSpaces) {
                theBoard[xCoordinate][yCoordinate] = currentWord[i];
                xCoordinate = xCoordinate + xChange;
                yCoordinate = yCoordinate + yChange;
            }
        }
    }
    
    private boolean findsClearChute(char[][] board, int xStarting, int yStarting, int xDir, int yDir, char[] word) {
        // if chute is clear, return true
        int counter = 0;
        // make sure the first spot is clear
        if ( board[xStarting][yStarting] == ' ' ) {
            counter++;
        }
        for ( int i = 0 ; i < word.length-1 ; i++ ) {
            if (board[xStarting + xDir][yStarting + yDir] == ' ') {
                counter++;
                xStarting = xStarting + xDir;
                yStarting = yStarting + yDir;
            }
        }
        if ( counter == word.length ) return true;
        else {
            return false;
        }
    }
    //methods
    private void displayWordList(String[] theList) {
        System.out.println();
        System.out.println("We are going to display the word list of the current word search: ");
        for ( int i = 0 ; i < theList.length ; i++ ) {
            System.out.println(theList[i]);
        }
        System.out.println("Those are the 6 words");
        System.out.println();
    }
    private void buildSubWordList( String[] mList ) {
        int i;
        for ( int j = 0 ; j < 6 ; j++ ) {
            i = (int) ((int)18*Math.random());
            subWordList[j] = mList[i];
        }
    }


    public static void main (String [] args) { q2 qq = new q2();}
}

